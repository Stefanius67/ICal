<?php

declare(strict_types=1);

namespace SKien\iCal;

/**
 * Base class for iCal components that supports recurrent objects.
 *
 * Used by
 * - iCalEvent
 * - iCalTimezoneProp
 *
 * @author Stefanius <s.kientzler@online.de>
 * @copyright MIT License - see the LICENSE file for details
 */
abstract class iCalRecurrenceBase
{
    use iCalHelper;

    /** @var int    unix timestamp start day and time       */
    protected ?int $uxtsStart = null;
    /** @var string RRULE     */
    protected string $strRRule = '';
    /** @var array<int> RDATE     */
    protected array $aRDate = [];
    /** @var array<int> EXDATE     */
    protected array $aExcludeDates = [];
    /** @var bool   if true, the startdate is included in the resulting list of recurrent dates     */
    protected bool $bIncludeStart;

    /**
     * Creates an instance of a component that supports recurrient dates.
     * @param iCalendar $oICalendar
     * @param bool $bIncludeStart
     */
    public function __construct(iCalendar &$oICalendar, bool $bIncludeStart)
    {
        $this->oICalendar = $oICalendar;
        $this->bIncludeStart = $bIncludeStart;
    }

    /**
     * @param int $uxtsStart  unix timestamp of the events start.
     */
    public function setStart(?int $uxtsStart) : void
    {
        $this->uxtsStart = $uxtsStart;
    }

    /**
     * @return int  unix timestamp
     */
    public function getStart() : ?int
    {
        return $this->uxtsStart;
    }

    /**
     * Sets the RRULE definition.
     * The resulting recurrent dates can be computed in the `getRecurrentDates()`
     * method.
     * @param string $strRRule
     */
    public function setRRule(string $strRRule) : void
    {
        $this->strRRule = $strRRule;
    }

    /**
     * @return string
     */
    public function getRRule() : string
    {
        return $this->strRRule;
    }

    /**
     * Builds the list of recurrent dates.
     * Recurrent dates can be specified by the RRULE property and/or one or
     * more RDATE values. <br>
     * If neither an RRULE nor RDATEs are specified, the result contains the
     * property's start date. <br><br>
     *
     * The final recurrence set is generated by gathering all of the start
     * DATE-TIME values generated by any of the specified "RRULE" and "RDATE"
     * properties, and then excluding any start DATE-TIME values specified
     * by "EXDATE" properties.
     * @link https://www.rfc-editor.org/rfc/rfc5545.html#section-3.8.5
     * @return array<int>   sorted array of UNIX timestamps
     */
    public function getRecurrentDates() : array
    {
        $aResult = [];
        if ($this->uxtsStart !== null) {
            if (!empty($this->strRRule)) {
                $strTZID = $this->oCalcTimezone ? $this->oCalcTimezone->getTZID() : '';
                $oRRule = new iCalRecurrenceRule($this->oICalendar, $this->strRRule);
                $oRRule->setExcludeDates($this->aExcludeDates);
                $aResult = $oRRule->getDateList($this->uxtsStart, 0, $strTZID);
            } else {
                // there's no RRULE specified...
                // we create at least the start date specified
                $aResult[] = $this->uxtsStart;
            }
            // ... and add possibly defined RDATE repetitions
            $aResult = array_merge($aResult, $this->aRDate);
            $aResult = array_unique($aResult);
            asort($aResult);

            if (!$this->bIncludeStart && count($aResult) > 0) {
                array_shift($aResult);
            }
        }
        return $aResult;
    }
}
